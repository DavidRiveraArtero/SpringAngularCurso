package com.bolsadeideas.springboot.backend.apirest.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.bolsadeideas.springboot.backend.apirest.models.entity.Cliente;
import com.bolsadeideas.springboot.backend.apirest.models.services.IClienteService;

@CrossOrigin(origins = {"http://localhost:4200"}) // CON EL CORS ORIGIN LE DAMOS ACCESO A ESE DOMINIO
@RestController // ES EL DECORADOR DE LA CLASE PARA DECIRLE QUE ES UN CONTROLADOR REST
@RequestMapping("/api") // CON ESTO CREAREMOS LAS URL O ENDPOINTS

public class ClienteRestController {
	
	@Autowired // PARA PODER HACER LA INJECCION NECESITAMOS ESTE DECORADOR
	private IClienteService clienteService;
	
	// READ ALL CLIENTE
	@GetMapping("/clientes") // /api/cliente esto seria un endpoint 
	public List<Cliente> index(){
		return clienteService.findAll();
	}
	
	// READ ONE CLIENT
	@GetMapping("/clientes/{id}")  
	public Cliente show(@PathVariable Long id) { // @PathVariable es la anotaci√≥n que nos sirve dentro de Spring framework para configurar variables dentro de los propios segmentos de la URL
		return clienteService.findById(id);
	}
	
	// CREATE CLIENT
	@PostMapping("/clientes")
	@ResponseStatus(code = HttpStatus.CREATED)
	public Cliente create(@RequestBody Cliente cliente) { // @Request body para decirle que la peticion estara dentro del body
		return clienteService.save(cliente);
	}
	
	// DELETE CLIENT
	@DeleteMapping("/clientes/{id}")
	@ResponseStatus(code = HttpStatus.CREATED)
	public void deleteC(@PathVariable Long id) {
		clienteService.deleteC(id);
	}
	
	// UPDATE CLIENTE
	@PutMapping("/clientes/{id}")
	@ResponseStatus(code = HttpStatus.NO_CONTENT)
	public Cliente updateC(@RequestBody Cliente cliente, @PathVariable Long id) {
		
		Cliente clienteActual = clienteService.findById(id);
		clienteActual.setApellido(cliente.getApellido());
		clienteActual.setNombre(cliente.getNombre());
		clienteActual.setEmail(cliente.getEmail());
		
		return clienteService.save(clienteActual);
	}
	
	
	
}
